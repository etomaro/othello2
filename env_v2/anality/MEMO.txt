・list.append -> set.addにすると倍くらい早くなった

・OOM: out of memory

・generation12を求める際に下記エラーになって終了していた
"""
(raylet) [2024-07-21 15:30:50,366 E 22897 22897] (raylet) node_manager.cc:3064: 24 Workers (tasks / actors) killed due to memory pressure (OOM), 0 Workers crashed due to other reasons at node (ID: 0a868b160a2bf22247e7381985404ac3f83b14102435da67f3d3496c, IP: 172.18.139.139) over the last time period. To see more information about the Workers killed on this node, use `ray logs raylet.out -ip 172.18.139.139`
(raylet) 
(raylet) Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2024-07-21 15:42:06,127 E 22729 23781] gcs_rpc_client.h:653: Failed to connect to GCS within 60 seconds. GCS may have been killed. It's either GCS is terminated by `ray stop` or is killed unexpectedly. If it is killed unexpectedly, see the log file gcs_server.out. https://docs.ray.io/en/master/ray-observability/user-guides/configure-logging.html#logging-directory-structure. The program will terminate.
"""

・error2
(raylet) Spilled 3155 MiB, 5778 objects, write throughput 1318 MiB/s. Set RAY_verbose_spill_logs=0 to disable this message.


・rayの分散処理がすべて終わるまでメモリがどんどん上がっていく(generation12で観測)


・remote時に[(memory=2 * 1024 * 1024 * 1024)]をしようすると10世代を計算する際に2.5倍時間がかかった(109s->259s)
  https://docs.ray.io/en/latest/ray-core/patterns/limit-running-tasks.html#core-patterns-limit-running-tasks